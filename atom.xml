<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ellison Leão]]></title>
  <link href="http://ellisonleao.github.com/atom.xml" rel="self"/>
  <link href="http://ellisonleao.github.com/"/>
  <updated>2013-07-09T02:26:45-03:00</updated>
  <id>http://ellisonleao.github.com/</id>
  <author>
    <name><![CDATA[Ellison Leão]]></name>
    <email><![CDATA[ellisonleao@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[#ChangeBrazil]]></title>
    <link href="http://ellisonleao.github.com/blog/2013/number-changebrazil/"/>
    <updated>2013-06-17T11:22:00-03:00</updated>
    <id>http://ellisonleao.github.com/blog/2013/number-changebrazil</id>
    <content type="html"><![CDATA[<p>Hello guys,</p>

<p>Unfortunately this post is not about game development or web
development, but fortunately it&#8217;s about a greater cause that is trying
to change the reality of many people here in Brazil. And since i live
here it&#8217;s my job to share this in this blog.</p>

<p>This post is to talk about a really nice video made from an initiative
called &#8220;Change Brazil&#8221;.
This great video talks about all the bad things happening right now here in
Brazil, while the media only shows the people that we&#8217;re ready to
celebrate the next World Cup and the next Olympic Games. But we are not.
It only takes 5 minutes of your time. Please share it.</p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/AIBYEXLGdSg "></iframe></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debug all the Components of a Unity3D GameObject]]></title>
    <link href="http://ellisonleao.github.com/blog/2013/debug-all-the-components-of-a-unity3d-gameobject/"/>
    <updated>2013-05-08T00:34:00-03:00</updated>
    <id>http://ellisonleao.github.com/blog/2013/debug-all-the-components-of-a-unity3d-gameobject</id>
    <content type="html"><![CDATA[<p>Hello people! This is a quick post about how can you get all the
Components of a Unity GameObject. Sometimes you need to call a
function inside a script that belongs to another GameObject. Getting
this script component is one of the ways of doing it. Let&#8217;s see the code</p>

<pre><code>Component[] components = YOURGAMEOBJECT.GetComponents&lt;Component&gt;();
foreach (Component component in components){
    Debug.Log("@@@@" + YOURGAMEOBJECT.name + "\t["+c.name+"]" + 
              "\t"+ c.GetType() +"\t"+c.GetType().BaseType);

}
</code></pre>

<p>And that&#8217;s it. Call this code inside a script and see all the components
in the Debug console. Hope it helps! See you next post!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A simple fabfile for Django applications]]></title>
    <link href="http://ellisonleao.github.com/blog/2013/a-simple-fabfile-for-django-applications/"/>
    <updated>2013-05-06T12:37:00-03:00</updated>
    <id>http://ellisonleao.github.com/blog/2013/a-simple-fabfile-for-django-applications</id>
    <content type="html"><![CDATA[<p>Hello people, after so many time working with django projects, i’ve decided to put a simple fabric fabfile to help people easily deploy django projects into dev and production servers.</p>

<p>It supports several tasks, like:</p>

<ul>
<li>Get latest dump</li>
<li>Generate dump from automysqlbackup</li>
<li>Clear Thumbnails for projects using sorl-thumbnail</li>
<li>Simple and easy deploy with supervisor</li>
</ul>


<p>It’s still a initial file, but it already contains a lot of nice features. Hope you guys like it!</p>

<p>Source code available <a href="https://github.com/ellisonleao/fabfile-django-bootstrap">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World (Again!)]]></title>
    <link href="http://ellisonleao.github.com/blog/2013/hello-world-again/"/>
    <updated>2013-03-18T01:38:00-03:00</updated>
    <id>http://ellisonleao.github.com/blog/2013/hello-world-again</id>
    <content type="html"><![CDATA[<p>Hi People! it&#8217;s been a long time since my last post on the older blog
and i&#8217;m glad to say that the i&#8217;m back on blogging about
music, game developing and web development and other cool things. Hope you keep
visiting the blog or signing the feed. Stay tuned for the next posts!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The hope of our childhood isn't lost (yet)]]></title>
    <link href="http://ellisonleao.github.com/blog/2012/a-infancia-ainda-nao-esta-perdida/"/>
    <updated>2012-04-16T12:33:00-03:00</updated>
    <id>http://ellisonleao.github.com/blog/2012/a-infancia-ainda-nao-esta-perdida</id>
    <content type="html"><![CDATA[<p>Monday is usually the day you wake a little bit more lazier, hoping to spend a little more time in bed, thinking why can&#8217;t it be Friday to sleep a little more time.</p>

<p>Surprisingly, when I arrived at work I came across to a really fantastic notice. A notice that encouraged that Monday routine and made me think of my childhood, of how I loved to create things and how I imagine doing adult things. On that notice I saw a boy of nine years old creating an analogic arcade just using cardboard boxes. He created everything from the box that manages the money of the chips ($ 1 per card) and so-called fun passes (allowing a total of 500 shots for $ 2), to the games. The boy who helps his father in his mechanic garage, was discovered by a customer of the shop, who created a Facebook event and a Crowd Funding movement  to raise money for his college. The boy&#8217;s name is Caine and this short movie below was created to show all of this little boy&#8217;s geniality. Check below</p>

<div class="embed-video-container"><iframe src="http://player.vimeo.com/video/40000072 "></iframe></div>


<p><a href="http://www.updateordie.com/2012/04/11/o-menino-que-montou-um-fliperama-com-caixas-de-papelao/">Saw it here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Não eram apenas copos rosas]]></title>
    <link href="http://ellisonleao.github.com/blog/2012/nao-eram-apenas-copos-rosas/"/>
    <updated>2012-02-16T18:14:00-02:00</updated>
    <id>http://ellisonleao.github.com/blog/2012/nao-eram-apenas-copos-rosas</id>
    <content type="html"><![CDATA[<p><strong>Portuguese only!</strong></p>

<p>Nos dias 27,28 e 29 de Janeiro aconteceu a <strong>Global Game Jam 2012</strong> , o maior evento de game jam do mundo, que reuniu cerca de 10684 participantes espalhados por 42 países e mais de 2000 jogos realizados.
Curitiba foi, esse ano, a segunda maior sede do mundo, com 245 inscritos e só perdeu pra Dinamarca, que teve 290 inscritos. Nosso grupo foi composto por 5 pessoas ( 3 programadores e 2 artistas ).
Sem nome inicialmente, chegamos por volta das 17h na sexta feira e já escolhemos um lugar para colocar as tralhas que iríamos usar durante todo o final de semana ( salgados, doces, energéticos, etc..). Às 18h começava o keynote oficial, com palestras de vários nomes da comunidade mundial dos jogos e o tema ainda não tinha sido divulgado. Uma expectativa pairava o pessoal que estava lá sedendo pela vontade de criar coisas novas e divertidas.
Após o keynote de Will Wright, o tema surgira e todos que estavam lá ficaram abismados com um tema tão diferente. Pela primeira vez, o tema da Global Game Jam não era uma palavra e sim uma imagem, Ouroboros.</p>

<p><img src="http://2.bp.blogspot.com/-Bok6gTKk2WY/US51m-nzvmI/AAAAAAAAOLM/8ns0CdXxRp8/s1600/ouroboros.jpg" alt="Ouroboros" /></p>

<p>Infinito, ciclo da vida, morte e ressureição. Esses foram as palavras que palpitavam na grande sala onde os grupos se reuniam para pensar como seria fazer um jogo com estes temas.
Era a hora do brainstorm inicial.
Nosso grupo ficou cerca de 2 horas jogando idéias num papel, misturando vários elementos e mecânicas, até que, chegamos num  consenso. Contaríamos a saga de um alquimista em busca da vida eterna.
Na história, o alquimista Frangoi consegue transitar em 2 mundos paralelos (real e espiritual) e tem de percorrer um longo percurso, resolvendo enigmas e combatendo inimigos pelo caminho. Idéias concretizadas, fomos para o planejamento de o que daria pra fazer nessas 48 horas. Uns achavam que não sairíamos de um concept, outros já achavam que dava pra completar uma fase inteira. E ficou na base do &#8220;vamo ver no que vai dar&#8221;. Começando as atividades, resolvemos utilizar como ferramentas, o excelente framework <a href="http://www.melonjs.org">MelonJS</a>, já que tínhamos resolvido fazer nosso jogo em HTML5.</p>

<p>Vamos aos rabiscos. Nossos excelentes artistas <a href="http://rathaelos.deviantart.com/">Rafael Françoi</a> e <a href="http://www.facebook.com/profile.php?id=100000111944458">Carlos Iubel</a> começaram a botar a mão na massa ainda a noite e lá por volta das 01 da manhã do
sábado já tinhamos alguns concepts criados.</p>

<p>Realmente fiquei impressionado na primeira vez que já tínhamos alguns concepts do jogo em tão pouco tempo. Eu , Carlos (o programador) e o Pedro já estávamos preparando um esqueleto do código e conseguimos deixar a base do jogo bem sólida pra começar a introduzir a mecância que tínhamos atribuído pro jogo.
Nessa hora, o sono ja começou a bater e Carlos pediu um <em>timeout</em> e foi dormir. Passadas mais umas 2 horas (provavelmente já passava das 3 da manhã) foi a vez do Pedro e do Carlos (o artista) de irem tirar uma soneca.
Ficariam de guarda eu e o Rafael que já estava super empolgado criando um concept mais bem feito do velhinho Frangoi.
Sábado já estava claro e retomamos as atividades. O dia estava correndo bem e tanto código como arte estavam evoluíndo bem. Conseguimos montar um protótipo jogável ainda no começo da tarde de sábado.
Agora era integrar o restante da arte e partir para os testes de balanceamento. Carlos ( o programador ) montou um mapa base e começamos a pensar nos possíveis desafios que o jogo poderia ter (e que o tempo nos permitisse fazer ). Já era noite e alguns bugs começaram a aparecer.
Víamos que a madrugada seria bem longa, pois a maioria desses bugs eram críticos e teriam de ser resolvidos o mais rápido possível. Felizmente, depois de muita pizza e energético tivemos força e conseguimos resolvê-los. Agora era terminar as últimas fases de <em>polishing</em> e partir para o abraço.
Já era Domingo, por volta das 12:00 e tínhamos finalizado nosso protótipo do jogo. Como estávamos felizes. Nem o cansaço, dores musculares e outras coisas nocivas atrapalhariam aquela sensação de dever cumprido. Entregamos o jogo antes do prazo e após uma rápida apresentação no auditório da PUC, pudemos dar como finalizada a nossa primeira participação em uma Global Game Jam.</p>

<p>O <strong>Fuscshia Team</strong> (Nome dado de última hora pra equipe, devido aos nossos copos descartáveis rosas usados jam) nasceu nesse evento e espera dar continuação a esse jogo que até mesmo com um protótipo já conseguiu ficar entre os <a href="http://www.ggjcwb.com/2012/02/votacao2012/">3 jogos mais votados da GGJ Curitiba</a> e ser citado no <a href="http://olivierbiot.wordpress.com/">blog</a> e <a href="http://www.melonjs.org/gallery.html">galeria</a> oficial do framework MelonJS], fatos estes que nos deixam cada vez mais motivados a finalizar uma versão jogável do protótipo.</p>

<p><img src="http://globalgamejam.org/sites/default/files/styles/large/public/fuschiateam2.jpg" alt="Fuschia
Team" /></p>

<p>Abaixo, alguns vídeos que rolaram na Global Game Jam:</p>

<p>Matéria que saiu na Rede Globo local, falando sobre o evento:</p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/GCwCSUXPBP0 "></iframe></div>


<p></p>

<p>Entrevista com os desenvolvedores do Frangoi&#8217;s Journey:</p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/nzl6Bmtfjhk "></iframe></div>


<p></p>

<p>Gameplay do Frangoi&#8217;s Journey:</p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/DXE6YxewXaM "></iframe></div>


<p>Quem quiser acompanhar a evolução do jogo, pode baixar ou contribuir gratuitamente com o código fonte do jogo disponível no meu Github, <a href="https://github.com/ellisonleao/frangois">Aqui</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XNA e os canhões!]]></title>
    <link href="http://ellisonleao.github.com/blog/2011/xna-e-os-canhoes/"/>
    <updated>2011-11-10T16:47:00-02:00</updated>
    <id>http://ellisonleao.github.com/blog/2011/xna-e-os-canhoes</id>
    <content type="html"><![CDATA[<p><strong>Portuguese Only!!</strong></p>

<p>Fala pessoal, começando uma série de posts sobre desenvolvimento de jogos, resolvi falar um pouco de um exercício interessante pra quem gostaria de fazer uma física básica usando vetores com XNA. O seguinte exercício mostra um canhão que atira uma bala na tela. Para explicar o exercício, uma rápida teoria:</p>

<h2>Os vetores</h2>

<p>Vetores são representações de força que possuem uma intensidade e uma direção, chamadas de forças vetoriais. Um vetor consegue facilmente representar a direção de um vento, a força da gravidade, a direção de um chute de uma bola, etc. Para representar os vetores utilizamos setas direcionais como na figura abaixo:</p>

<p><img src="http://img441.imageshack.us/img441/4726/vetoresequipolentes.png" alt="" /></p>

<p>Para representar um vetor matematicamente, utilizamos 2 pontos no eixo cartesiano ( para uma representação em 2 dimensões ) e 3 pontos ( para uma representação em 3 dimensões ). Vale lembrar que um vetor não é um ponto matemático, apesar da estrutura dos 2 serem bem parecidas.</p>

<h2>A física</h2>

<p>Com vetores, é possível também realizar operações matemáticas, como soma, subtração e multiplicação por um escalar. Não vou me aprofundar nessa parte, recomendo a leitura de um artigo bem interessante no site <a href="http://www.pontov.com.br/site/arquitetura/54-matematica-e-fisica/132-o-uso-de-vetores-nos-jogos">Ponto V!</a>, que fala bem mais aprofundado sobre o uso de vetores nos jogos. Abaixo, temos um simples exemplo de operações utilizando vetores:</p>

<p><img src="http://www.physicsmynd.com/wp-content/uploads/2010/09/Vector-add1.png" alt="" /></p>

<p>Para o nosso joguinho iremos realizar o cálculo de resultante de vetores para o lançamento do nosso canhão. Utilizaremos como forças a aceleração da gravidade, a velocidade da bola e o vento.</p>

<h2>O XNA</h2>

<p>No jogo, utilizaremos o XNA para o desenvolvimento, um maravilhoso framework que nos permite ganhar bastante tempo, devido ao seu código já possuir implementado algumas bibliotecas matemáticas e gráficas. Todo código desenvolvido em XNA é escrito na linguagem C#, por isso , pra quem ainda não é familiarizado com a linguagem <a href="http://msdn.microsoft.com/en-us/vcsharp/aa336809">recomendo uma leitura inicial aqui</a></p>

<p>Basicamente, o XNA é composto de uma classe principal (Game) com seus principais métodos:</p>

<ul>
<li><strong>Initialize()</strong> - Atribui inicializações iniciais ao jogo ( Valores iniciais para algumas variáveis , etc..)</li>
<li><strong>LoadContent()</strong> - Carrega todo o conteúdo do jogo na memória (Animações, Sprites, Fontes, Modelos 3D, etc..)</li>
<li><strong>Draw()</strong> - Método que renderiza o conteúdo do jogo.</li>
<li><strong>Update()</strong> - Atualiza o jogo e envia o resultado para a função Draw()</li>
</ul>


<p>Neste artigo apenas irei mostrar as partes interessantes dos algoritmos do jogo, deixando um link no final, praqueles que quiserem baixar e testar nas suas máquinas.</p>

<h2>Movimentação e vetor offset</h2>

<p>No jogo, o canhão poderá aumentar o diminuir o ângulo de lançamento para tentar atingir o alvo. Utilizaremos as setas de esquerda e direita para fazer esta movimentação.</p>

<p>Dentro do arquivo Cannon.cs , no método UpdateCannon() , temos o seguinte código</p>

<pre><code>if (keybState.IsKeyDown(Keys.Left))
   Angle -= 1;
if (keybState.IsKeyDown(Keys.Right))
   Angle += 1;
Angle = MathHelper.Clamp(Angle, -180, 0);
</code></pre>

<p>É nessa parte que o código recalcula o novo ângulo de rotação do canhão. Como vocês podem ver, o código é extremamente simples, dado que o XNA já possui métodos que tratam os eventos de input de teclado (IsKeyDown ) , como também limita a rotação angular do canhão em um arco de no máximo 180 graus</p>

<pre><code>Angle = MathHelper.Clamp(Angle, -180, 0);
</code></pre>

<p>Mas agora temos o seguinte problema: Após eu setar o ângulo de lançamento do canhão, precisamos fazer com que a bala saia pela ponta do mesmo. E como fazemos isso ? Simples, utilizamos o vetor de offset.
Um vetor de offset, como o nome já dia, nada mais é do que um vetor que parte do centro até a ponta do canhão.
A partir do momento que rotacionamos o ângulo dele, precisamos ,também, rotacionar o vetor offset , fazendo com que toda vez que vamos atirar a bala, ela saia do lugar correto. Para entender melhor um vetor de offset, temos um exemplo gráfico abaixo:</p>

<p><img src="http://www.pontov.com.br/site//images/stories/artigos/6.png" alt="" /></p>

<p>Na imagem vimos 3 vetores: o amarelo representa a posição da nave e os 2 brancos são vetores offset que, nesse caso, representam o lugar por ondem as balas da nave saem.</p>

<p>O cálculo do nosso vetor de offset pode ser demonstrado no método getCannonOffset() , da classe Cannon, a seguir:</p>

<pre><code>public Vector2 getCannonOffset()
{
  float size = (Sprite.Width) - 20;
  Vector2 direction = new Vector2(((float)Math.Cos(getRotateAngle()) * size),
                                 (float)(Math.Sin(getRotateAngle()) * size));
  return Vector2.Add(Position, direction);
}
</code></pre>

<p>Primeiro calculamos o tamanho que vai ter o nosso vetor (nesse caso a largura do canhão - 20 pixels , posição aproximada da &#8220;boca&#8221; dele) . Agora temos de calcular o nosso vetor offset. O cálculo é relativamente simples: Dado o tamanho do vetor e o ângulo, temos:</p>

<pre><code>x = co-seno(ângulo) * tamanho; 
y = seno(ângulo) * tamanho;
</code></pre>

<p>Lembrando que o ângulo tem de ser passado em Radianos ( o método getRotateAngle() transforma o ângulo dado em Radianos ).</p>

<p>Por final retornamos um vetor que é a soma da posição do canhão atual , com esse nosso novo vetor, nos dando assim, o nosso vetor offset.</p>

<h2>Movimento da Bala</h2>

<p>Outra parte que vale a pena falar é como funciona o Update do jogo. No caso do lançamento da bala do canhão, temos de calcular para cara segundo, a sua nova posição com relação a força aplicada inicialmente.</p>

<p>O cálculo da nova posição da bala do canhão pode ser visto na classe CannonBall, método Update():</p>

<pre><code>public void Update(GameTime gameTime)
{
    float secs = (float)gameTime.ElapsedGameTime.TotalSeconds * 9;
    Vector2 accelSecs = (Wind / Mass + Gravity) * secs;
    Position += (Momentum + accelSecs) * secs;
    Momentum += accelSecs;
}
</code></pre>

<p>Nesse método calculamos o chamado <em>deltatime</em> do jogo, que nos da informação do tempo corrido do jogo. Aqui, por motivos de balanceamento, multiplico o delta time por 9 para aumentar a velocidade com que a bomba se move.
Depois, calculamos a resultante das forças que estão atuando na bola (neste caso vento, massa e gravidade). Após calcularmos nossa resultante, atualizamos a posição da bala, somando-a com o nosso vetor de posição.</p>

<h2>Conclusão</h2>

<p>Mostrei aqui apenas algumas partes interessantes do exercício de canhões com vetores usando XNA. Aconselho a vocês baixarem o  código completo do jogo no meu <a href="http://github.com/ellisonleao/Xna-Cannon">Github</a></p>

<p>Então é isso pessoal, espero que vocês tenham entendido como é importante o uso de vetores nos jogos. Até o próximo post pessoal!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The wonderful world of Screen]]></title>
    <link href="http://ellisonleao.github.com/blog/2011/o-maravilhoso-mundo-do-screen/"/>
    <updated>2011-09-22T00:47:00-03:00</updated>
    <id>http://ellisonleao.github.com/blog/2011/o-maravilhoso-mundo-do-screen</id>
    <content type="html"><![CDATA[<p>According to the manual, &#8220;Screen is a full-screen window manager that multiplexes a physical terminal between several processes, typically interactive shells,&#8221; in other words, imagine having multiple terminals open in the same ssh session, with each one having their separate processes (with other ssh connections). Have you Imagined? Now imagine that you can keep that session active in the server connected by the time you want. Therefore, your tasks will be active on the server as long as you want and there be no problem if  a connection failure happens. In this post, I will show some of the characteristics of the screen and teach a simple script that generates a session with 3 &#8220;tabs&#8221; opened for one project.</p>

<h1>Installing Screen</h1>

<p>To install screen, for Ubuntu and Debian users, open a terminal and just type:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~# sudo apt-get install screen
</span></code></pre></td></tr></table></div></figure>


<p>To other distros, you can download screen in the <a href="http://www.gnu.org/software/screen/">official site</a></p>

<h1>Configuring a .screenrc file</h1>

<p>We can configure a simple but cool visual interface for screen, modifying our .screenrc file . Open your favorite text editor and edit the file ~/.screenrc:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>hardstatus alwayslastline
</span><span class='line'>hardstatus string <span class="s1">&#39;%{= kG}[ %{G}%H %{g}][%= %{= kw}%?%-Lw%?%{r}(%{W}%n*%f%t%?(%u)%?%{r})%{w}%?%+Lw%?%?%= %{g}][%{B} %d/%m %{W}%c %{g}]&#39;</span>
</span><span class='line'>vbell on
</span><span class='line'>defscrollback 1024
</span><span class='line'>startup_message off
</span><span class='line'>autodetach on
</span><span class='line'>defutf8 on
</span></code></pre></td></tr></table></div></figure>


<p>Now let&#8217;s open our screen. Go to the terminal and type <em>screen</em>. You should see a screen like this:</p>

<p><img src="http://2.bp.blogspot.com/_iWsqNoMkfno/TIJkuLOBtnI/AAAAAAAAAOg/I9ehKHxgI1w/s1600/screen.png" alt="" /></p>

<p>Here  we can find some useful informations:</p>

<ul>
<li>Left side: Host name that you&#8217;re connected</li>
<li>Center:  Actual &#8220;Tab&#8221;</li>
<li>Right side: Server Date/Time</li>
</ul>


<p>Screen uses the command &#8220;Ctrl-A&#8221; as a signal to send commands to screen instead of the shell.</p>

<p>Some basics commands on screen:</p>

<ul>
<li>(Ctrl+A) + C - Creates new &#8220;Tab&#8221;</li>
<li>(Ctrl+D) - Remove current &#8220;Tab&#8221;</li>
<li>(Ctrl+A) + D - Detach the screen session</li>
</ul>


<p>Between &#8220;Tabs&#8221;:</p>

<ul>
<li>(Ctrl+A) + N - Go to the next &#8220;tab&#8221;</li>
<li>(Ctrl+A) + P - Go to the previous &#8220;tab&#8221;</li>
<li>(Ctrl+A) + NUM - Go to &#8220;tab&#8221; number = NUM</li>
</ul>


<p>For more commands just type (Ctrl+A) + ? for help.</p>

<h1>A general script to create a development environment</h1>

<p>Now it&#8217;s time to create a cool script that allow us to call screen with 3 pre-opened tabs, each one with its own functionality.
In my projects i use to put one tab for run general services (web servers, etc), another tab for VIM editor and another tab with a bash for general commands. The script was created with (Uncle Paul&#8217;s)[http://vimnox.wordpress.com/] help.</p>

<p>Let&#8217;s call the script <em>newscreen</em> . Create a file <em>newscreen</em> and put the following code:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">source</span> <span class="nv">$HOME</span>/.screenrc
</span><span class='line'>screen -t server
</span><span class='line'>screen -t vim
</span><span class='line'>screen -t bash
</span></code></pre></td></tr></table></div></figure>


<p>Save the file on <strong>/usr/local/bin/</strong> . That script is gonna be called by another script that we&#8217;ll call <em>createscreen</em>. Create anothe file called <em>createscreen</em> and put the following code:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> &amp;amp;quot;<span class="nv">$#&amp;</span>amp;quot; -ne 1 <span class="o">]</span>
</span><span class='line'><span class="k">then</span>
</span><span class='line'><span class="nb">echo</span> &amp;amp;quot;Digite o nome <span class="k">do </span>projeto&amp;amp;quot;
</span><span class='line'><span class="k">else</span>
</span><span class='line'>screen -RR <span class="nv">$1</span> -c /usr/local/bin/newscreen
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also save this file on <strong>/usr/local/bin/</strong> . After all set and done, give the execution permissions to <em>createscreen</em> file (chmod +x). Now we can use the script by typing:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~# /usr/local/bin newscreen PROJECTNAME
</span></code></pre></td></tr></table></div></figure>


<p>And that&#8217;s it! See you at next post!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mute in Curitiba]]></title>
    <link href="http://ellisonleao.github.com/blog/2011/mute-em-curitiba/"/>
    <updated>2011-09-16T12:13:00-03:00</updated>
    <id>http://ellisonleao.github.com/blog/2011/mute-em-curitiba</id>
    <content type="html"><![CDATA[<p>One of the finest things about living in Curitiba is that you can go to a lots of great shows and pay really cheap tickets. On September 4th was a hardcore day in Curitiba. I went to a show with Mute ( Canada ), one of the most promissing bands of the world hardcore bands scenario. I paid about R$ 25,00 (show worth the price) , and the show was really exciting. Here some live footage</p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/aaUmOSvROBw "></iframe></div>




<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/srTUn_o4WUM "></iframe></div>




<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/fiXKEAOtAtI "></iframe></div>

]]></content>
  </entry>
  
</feed>
