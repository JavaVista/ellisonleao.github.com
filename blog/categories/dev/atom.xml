<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Dev | Ellison Leão]]></title>
  <link href="http://ellisonleao.github.com/blog/categories/dev/atom.xml" rel="self"/>
  <link href="http://ellisonleao.github.com/"/>
  <updated>2014-02-11T14:29:06-02:00</updated>
  <id>http://ellisonleao.github.com/</id>
  <author>
    <name><![CDATA[Ellison Leão]]></name>
    <email><![CDATA[ellisonleao@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Não eram apenas copos rosas]]></title>
    <link href="http://ellisonleao.github.com/blog/2012/nao-eram-apenas-copos-rosas/"/>
    <updated>2012-02-16T18:14:00-02:00</updated>
    <id>http://ellisonleao.github.com/blog/2012/nao-eram-apenas-copos-rosas</id>
    <content type="html"><![CDATA[<p><strong>Portuguese only!</strong></p>

<p>Nos dias 27,28 e 29 de Janeiro aconteceu a <strong>Global Game Jam 2012</strong> , o maior evento de game jam do mundo, que reuniu cerca de 10684 participantes espalhados por 42 países e mais de 2000 jogos realizados. 
Curitiba foi, esse ano, a segunda maior sede do mundo, com 245 inscritos e só perdeu pra Dinamarca, que teve 290 inscritos. Nosso grupo foi composto por 5 pessoas ( 3 programadores e 2 artistas ). 
Sem nome inicialmente, chegamos por volta das 17h na sexta feira e já escolhemos um lugar para colocar as tralhas que iríamos usar durante todo o final de semana ( salgados, doces, energéticos, etc..). Às 18h começava o keynote oficial, com palestras de vários nomes da comunidade mundial dos jogos e o tema ainda não tinha sido divulgado. Uma expectativa pairava o pessoal que estava lá sedendo pela vontade de criar coisas novas e divertidas. 
Após o keynote de Will Wright, o tema surgira e todos que estavam lá ficaram abismados com um tema tão diferente. Pela primeira vez, o tema da Global Game Jam não era uma palavra e sim uma imagem, Ouroboros.</p>

<p><img src="http://2.bp.blogspot.com/-Bok6gTKk2WY/US51m-nzvmI/AAAAAAAAOLM/8ns0CdXxRp8/s1600/ouroboros.jpg" alt="Ouroboros" /></p>

<p>Infinito, ciclo da vida, morte e ressureição. Esses foram as palavras que palpitavam na grande sala onde os grupos se reuniam para pensar como seria fazer um jogo com estes temas. 
Era a hora do brainstorm inicial. 
Nosso grupo ficou cerca de 2 horas jogando idéias num papel, misturando vários elementos e mecânicas, até que, chegamos num  consenso. Contaríamos a saga de um alquimista em busca da vida eterna. 
Na história, o alquimista Frangoi consegue transitar em 2 mundos paralelos (real e espiritual) e tem de percorrer um longo percurso, resolvendo enigmas e combatendo inimigos pelo caminho. Idéias concretizadas, fomos para o planejamento de o que daria pra fazer nessas 48 horas. Uns achavam que não sairíamos de um concept, outros já achavam que dava pra completar uma fase inteira. E ficou na base do “vamo ver no que vai dar”. Começando as atividades, resolvemos utilizar como ferramentas, o excelente framework <a href="http://www.melonjs.org">MelonJS</a>, já que tínhamos resolvido fazer nosso jogo em HTML5.</p>

<p>Vamos aos rabiscos. Nossos excelentes artistas <a href="http://rathaelos.deviantart.com/">Rafael Françoi</a> e <a href="http://www.facebook.com/profile.php?id=100000111944458">Carlos Iubel</a> começaram a botar a mão na massa ainda a noite e lá por volta das 01 da manhã do
sábado já tinhamos alguns concepts criados.</p>

<p>Realmente fiquei impressionado na primeira vez que já tínhamos alguns concepts do jogo em tão pouco tempo. Eu , Carlos (o programador) e o Pedro já estávamos preparando um esqueleto do código e conseguimos deixar a base do jogo bem sólida pra começar a introduzir a mecância que tínhamos atribuído pro jogo. 
Nessa hora, o sono ja começou a bater e Carlos pediu um <em>timeout</em> e foi dormir. Passadas mais umas 2 horas (provavelmente já passava das 3 da manhã) foi a vez do Pedro e do Carlos (o artista) de irem tirar uma soneca. 
Ficariam de guarda eu e o Rafael que já estava super empolgado criando um concept mais bem feito do velhinho Frangoi.
Sábado já estava claro e retomamos as atividades. O dia estava correndo bem e tanto código como arte estavam evoluíndo bem. Conseguimos montar um protótipo jogável ainda no começo da tarde de sábado. 
Agora era integrar o restante da arte e partir para os testes de balanceamento. Carlos ( o programador ) montou um mapa base e começamos a pensar nos possíveis desafios que o jogo poderia ter (e que o tempo nos permitisse fazer ). Já era noite e alguns bugs começaram a aparecer. 
Víamos que a madrugada seria bem longa, pois a maioria desses bugs eram críticos e teriam de ser resolvidos o mais rápido possível. Felizmente, depois de muita pizza e energético tivemos força e conseguimos resolvê-los. Agora era terminar as últimas fases de <em>polishing</em> e partir para o abraço. 
Já era Domingo, por volta das 12:00 e tínhamos finalizado nosso protótipo do jogo. Como estávamos felizes. Nem o cansaço, dores musculares e outras coisas nocivas atrapalhariam aquela sensação de dever cumprido. Entregamos o jogo antes do prazo e após uma rápida apresentação no auditório da PUC, pudemos dar como finalizada a nossa primeira participação em uma Global Game Jam.</p>

<p>O <strong>Fuscshia Team</strong> (Nome dado de última hora pra equipe, devido aos nossos copos descartáveis rosas usados jam) nasceu nesse evento e espera dar continuação a esse jogo que até mesmo com um protótipo já conseguiu ficar entre os <a href="http://www.ggjcwb.com/2012/02/votacao2012/">3 jogos mais votados da GGJ Curitiba</a> e ser citado no <a href="http://olivierbiot.wordpress.com/">blog</a> e <a href="http://www.melonjs.org/gallery.html">galeria</a> oficial do framework MelonJS], fatos estes que nos deixam cada vez mais motivados a finalizar uma versão jogável do protótipo.</p>

<p><img src="http://globalgamejam.org/sites/default/files/styles/large/public/fuschiateam2.jpg" alt="Fuschia
Team" /></p>

<p>Abaixo, alguns vídeos que rolaram na Global Game Jam:</p>

<p>Matéria que saiu na Rede Globo local, falando sobre o evento:</p>

<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/GCwCSUXPBP0 "></iframe></div> </p>

<p>Entrevista com os desenvolvedores do Frangoi’s Journey:</p>

<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/nzl6Bmtfjhk "></iframe></div> </p>

<p>Gameplay do Frangoi’s Journey:</p>

<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/DXE6YxewXaM "></iframe></div></p>

<p>Quem quiser acompanhar a evolução do jogo, pode baixar ou contribuir gratuitamente com o código fonte do jogo disponível no meu Github, <a href="https://github.com/ellisonleao/frangois">Aqui</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The wonderful world of Screen]]></title>
    <link href="http://ellisonleao.github.com/blog/2011/o-maravilhoso-mundo-do-screen/"/>
    <updated>2011-09-22T00:47:00-03:00</updated>
    <id>http://ellisonleao.github.com/blog/2011/o-maravilhoso-mundo-do-screen</id>
    <content type="html"><![CDATA[<p>According to the manual, “Screen is a full-screen window manager that multiplexes a physical terminal between several processes, typically interactive shells,” in other words, imagine having multiple terminals open in the same ssh session, with each one having their separate processes (with other ssh connections). Have you Imagined? Now imagine that you can keep that session active in the server connected by the time you want. Therefore, your tasks will be active on the server as long as you want and there be no problem if  a connection failure happens. In this post, I will show some of the characteristics of the screen and teach a simple script that generates a session with 3 “tabs” opened for one project.</p>

<h1 id="installing-screen">Installing Screen</h1>

<p>To install screen, for Ubuntu and Debian users, open a terminal and just type:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~# sudo apt-get install screen
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>To other distros, you can download screen in the <a href="http://www.gnu.org/software/screen/">official site</a></p>

<h1 id="configuring-a-screenrc-file">Configuring a .screenrc file</h1>

<p>We can configure a simple but cool visual interface for screen, modifying our .screenrc file . Open your favorite text editor and edit the file ~/.screenrc:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>hardstatus alwayslastline
</span><span class='line'>hardstatus string ‘%<span class="o">{=</span> kG<span class="o">}[</span> %<span class="o">{</span>G<span class="o">}</span>%H %<span class="o">{</span>g<span class="o">}][</span>%<span class="o">=</span> %<span class="o">{=</span> kw<span class="o">}</span>%?%-Lw%?%<span class="o">{</span>r<span class="o">}(</span>%<span class="o">{</span>W<span class="o">}</span>%n*%f%t%?<span class="o">(</span>%u<span class="o">)</span>%?%<span class="o">{</span>r<span class="o">})</span>%<span class="o">{</span>w<span class="o">}</span>%?%+Lw%?%?%<span class="o">=</span> %<span class="o">{</span>g<span class="o">}][</span>%<span class="o">{</span>B<span class="o">}</span> %d/%m %<span class="o">{</span>W<span class="o">}</span>%c %<span class="o">{</span>g<span class="o">}]</span>’
</span><span class='line'>vbell on
</span><span class='line'>defscrollback 1024
</span><span class='line'>startup_message off
</span><span class='line'>autodetach on
</span><span class='line'>defutf8 on
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now let’s open our screen. Go to the terminal and type <em>screen</em>. You should see a screen like this:</p>

<p><img src="http://2.bp.blogspot.com/_iWsqNoMkfno/TIJkuLOBtnI/AAAAAAAAAOg/I9ehKHxgI1w/s1600/screen.png" alt="" /></p>

<p>Here  we can find some useful informations:</p>

<ul>
  <li>Left side: Host name that you’re connected</li>
  <li>Center:  Actual “Tab”</li>
  <li>Right side: Server Date/Time</li>
</ul>

<p>Screen uses the command “Ctrl-A” as a signal to send commands to screen instead of the shell.</p>

<p>Some basics commands on screen:</p>

<ul>
  <li>(Ctrl+A) + C - Creates new “Tab”</li>
  <li>(Ctrl+D) - Remove current “Tab”</li>
  <li>(Ctrl+A) + D - Detach the screen session</li>
</ul>

<p>Between “Tabs”:</p>

<ul>
  <li>(Ctrl+A) + N - Go to the next “tab”</li>
  <li>(Ctrl+A) + P - Go to the previous “tab”</li>
  <li>(Ctrl+A) + NUM - Go to “tab” number = NUM</li>
</ul>

<p>For more commands just type (Ctrl+A) + ? for help.</p>

<h1 id="a-general-script-to-create-a-development-environment">A general script to create a development environment</h1>

<p>Now it’s time to create a cool script that allow us to call screen with 3 pre-opened tabs, each one with its own functionality. 
In my projects i use to put one tab for run general services (web servers, etc), another tab for VIM editor and another tab with a bash for general commands. The script was created with (Uncle Paul’s)[http://vimnox.wordpress.com/] help.</p>

<p>Let’s call the script <em>newscreen</em> . Create a file <em>newscreen</em> and put the following code:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">source</span> <span class="nv">$HOME</span>/.screenrc
</span><span class='line'>screen -t server
</span><span class='line'>screen -t vim
</span><span class='line'>screen -t bash
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Save the file on <strong>/usr/local/bin/</strong> . That script is gonna be called by another script that we’ll call <em>createscreen</em>. Create anothe file called <em>createscreen</em> and put the following code:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;binbash&quot;</span>&gt;!/bin/bash&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;if <span class="o">[</span> &amp;amp;quot;<span class="nv">$#&amp;</span>amp;quot; -ne 1 <span class="o">]</span>
</span><span class='line'><span class="k">then</span>
</span><span class='line'><span class="nb">echo</span> &amp;amp;quot;Digite o nome <span class="k">do </span>projeto&amp;amp;quot;
</span><span class='line'><span class="k">else</span>
</span><span class='line'>screen -RR <span class="nv">$1</span> -c /usr/local/bin/newscreen
</span><span class='line'><span class="k">fi</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Also save this file on <strong>/usr/local/bin/</strong> . After all set and done, give the execution permissions to <em>createscreen</em> file (chmod +x). Now we can use the script by typing:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~# /usr/local/bin newscreen PROJECTNAME
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And that’s it! See you at next post!</p>
]]></content>
  </entry>
  
</feed>
